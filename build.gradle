plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = mod_version
group = maven_group

repositories {
    maven { url = 'https://maven.parchmentmc.org' } // Parchment Mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { url = "https://mvn.devos.one/snapshots/" } // Registrate Fabric
    maven { url = "https://jitpack.io/" } // Mixin Extras
    maven { url = "https://maven.terraformersmc.com/" } // EMI
    maven { url "https://maven.shedaniel.me" } // REI
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}" // Minecraft
    mappings(loom.layered { // Mappings
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    //mappings("net.fabricmc:yarn:${yarn_mappings}:v2") // Mappings

    modImplementation "net.fabricmc:fabric-loader:${loader_version}" // Fabric Loader
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}" // Fabric API

    modImplementation(include("com.tterrag.registrate_fabric:Registrate:${registrate_version}")) // Registrate

    //modLocalRuntime "dev.emi:emi-fabric:${emi_version}" // EMI
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}" // REI
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("src/generated/resources/.cache")
        }
    }
}

loom {
    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=qook"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
        }

        server {
            runDir "run/server"
        }
    }
}

processResources {
    exclude("**/*.bbmodel", "**/*.lnk")

    Map<String, Object> properties = [
            "version": version,
            "minecraft_version": minecraft_version,
            "loader_version": loader_version,
            "fabric_version": fabric_version,
    ]
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }

    duplicatesStrategy = DuplicatesStrategy.WARN
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}"}
    }
}